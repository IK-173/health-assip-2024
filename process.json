[{
  "id" : "74c3mf",
  "name" : "totalCOPD_breathright1",
  "description" : null,
  "code" : "import os\nimport pandas as pd\nimport re\n\n# Paths to your data\nNon_Smoke_merged_df = \"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/Non_Smoke_merged_df.csv\"\ngreat_pm25_combined_df = pd.read_csv('/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/great_combined_daily_pm25.csv', low_memory=False)\ngreat_ozone_combined_df = pd.read_csv('/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/Ozone and PM2.5 Data/great_combined_daily_ozone.csv', low_memory=False)\n\n# Read all the csv into pandas dataframe in memory\n#great_ozone_combined_df = pd.read_csv(ozone_data_path, parse_dates=['Date Local'])\nNon_Smoke_merged_df = pd.read_csv(Non_Smoke_merged_df)\n#great_pm25_combined_df = pd.read_csv(great_pm25_combined_df)\n\nprint(Non_Smoke_merged_df.columns)\nprint(Non_Smoke_merged_df['COPD_prevalence_percentage_total'].head())\n\n\n# Convert 'Date Local' to datetime format\ngreat_ozone_combined_df['Date Local'] = pd.to_datetime(great_ozone_combined_df['Date Local'], errors='coerce')\n\nprint(Non_Smoke_merged_df.columns)\n\n# Rename columns to be consistent\n#COPD_incidence_df.rename(columns={'Location': 'County Name'}, inplace=True)\n\n# Use the melt function to transform the DataFrame from wide to long format. This will convert the year-specific columns into rows.\n#COPD_incidence_long = COPD_incidence_df.melt(\n    #id_vars=['County Name', 'FIPS', '% Change in Mortality Rate, 1980-2014'],\n    #var_name='year',\n    #value_name='Mortality'\n#)\n\n# Extract the year from the 'year' column using string operations and convert it to an integer.\n#ILD_long['year'] = ILD_long['year'].str.extract(r'(\\d{4})').astype(int)\n\n# Function to split the Mortality Rate column\nimport pandas as pd\n\ndef split_COPD_prevalence_percentage_total_column_into_three(COPD_prevalence_percentage_total):\n    if pd.isna(COPD_prevalence_percentage_total):\n        return pd.Series([None, None, None], index=['Average', 'Min', 'Max'])\n    \n    COPD_prevalence_percentage_total = str(COPD_prevalence_percentage_total)\n    \n    # Check for range format\n    match = re.match(r'(\\d+\\.\\d+) \\((\\d+\\.\\d+), (\\d+\\.\\d+)\\)', COPD_prevalence_percentage_total)\n    if match:\n        avg, min_val, max_val = match.groups()\n        return pd.Series([float(avg), float(min_val), float(max_val)], index=['Average', 'Min', 'Max'])\n    \n    # Handle single value format\n    try:\n        avg = float(COPD_prevalence_percentage_total)\n        return pd.Series([avg, avg, avg], index=['Average', 'Min', 'Max'])\n    except ValueError:\n        return pd.Series([None, None, None], index=['Average', 'Min', 'Max'])\n# Apply the function to the DataFrame\nNon_Smoke_merged_df[['Average', 'Min', 'Max']] = Non_Smoke_merged_df['COPD_prevalence_percentage_total'].apply(split_COPD_prevalence_percentage_total_column_into_three)\n\n\n\n# Ensure 'COPD Incidence' is a string and handle NaN values\nNon_Smoke_merged_df['COPD_prevalence_percentage_total'] = Non_Smoke_merged_df['COPD_prevalence_percentage_total'].astype(str)\n\n# Apply the function to the DataFrame\nNon_Smoke_merged_df[['Average', 'Min', 'Max']] = Non_Smoke_merged_df['COPD_prevalence_percentage_total'].apply(split_COPD_prevalence_percentage_total_column_into_three)\n\n# Drop the original 'Mortality' column if no longer needed\n#COPD_incidence_df = COPD_incidence_df.drop(columns=['COPD In'])\n\nprint(\"COPD_prevalence_percentage_total DataFrame columns:\", Non_Smoke_merged_df.columns)\n\n# Convert the daily ozone into yearly data\ngreat_ozone_combined_df['year'] = great_ozone_combined_df['Date Local'].dt.year\n\n# Group by additional columns and 'year'\ngrouped = great_ozone_combined_df.groupby(['State Name', 'year'])['Arithmetic Mean']\n\n# Compute statistics\nstats_df = grouped.agg(['max', 'min', 'mean', 'median', 'std']).reset_index()\n\n# Rename columns for clarity\n#stats_df.columns = ['State Name', 'County Name', 'year', 'Max', 'Min', 'Mean', 'Median', 'Std']\n\n# Convert columns to string in both DataFrames\n#stats_df['county'] = stats_df['County Name'].str.lower()\nstats_df['state'] = stats_df['State Name'].str.lower()\nstats_df['year'] = stats_df['year'].astype(int)\n\n#COPD_incidence_df['county'] = COPD_incidence_df['County Name'].str.strip().str.lower()\nNon_Smoke_merged_df['year'] = Non_Smoke_merged_df['year'].astype(int)\n\n# Check unique values in each DataFrame for the merge columns\nprint(\"Unique State Names in Non_Smoke_merged_df:\")\nprint(Non_Smoke_merged_df['State Name'].unique())\n\nprint(\"Unique State Names in stats_df:\")\nprint(stats_df['State Name'].unique())\n\nprint(\"Unique Years in Non_Smoke_merged_df:\")\nprint(Non_Smoke_merged_df['year'].unique())\n\nprint(\"Unique Years in stats_df:\")\nprint(stats_df['year'].unique())\n\n\n# Print the results\nprint(\"Ozone aggregated yearly data:\", stats_df)\nprint(\"COPD Incidence data header:\", Non_Smoke_merged_df.head())\n\n# Merge the statistics ozone DataFrame with the COPD_long DataFrame\ntotalCOPD_ozone_merged_df = pd.merge(Non_Smoke_merged_df, stats_df, on=['State Name', 'year'], how='inner')\n\nprint(\"Merged DataFrame:\", totalCOPD_ozone_merged_df.head())\n\n# Save to a CSV file\ntotalCOPD_ozone_merged_df.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD_ozone_merged_df.csv', index=False)\n\n\nprint(totalCOPD_ozone_merged_df)\nprint(totalCOPD_ozone_merged_df.columns)\n\n\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "3snnwc",
  "name" : "totalCOPD_breathright2",
  "description" : null,
  "code" : "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a DataFrame\n#file_path = '/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD_ozone_merged_df.csv'\n#totalCOPD_ozone_merged_df = pd.read_csv(file_path)\n\n\n# Verify the data types after conversion\n#print(totalCOPD_ozone_merged_df.dtypes)\n\n\n# Display the first few rows of the DataFrame\n#print(totalCOPD_ozone_merged_df.head())\n#print(totalCOPD_ozone_merged_df.columns)\n\n# Assuming 'Min_x' and 'Min_y' are already in the DataFrame\n#totalCOPD_ozone_merged_df['difference_Min_x_Min_y'] = totalCOPD_ozone_merged_df['Min_x'] - totalCOPD_ozone_merged_df['Min_y']\n\n# Display the first few rows to check the new column\n#print(totalCOPD_ozone_merged_df[['Min_x', 'Min_y', 'difference_Min_x_Min_y']].head())\n\n# Calculate basic statistics for the difference\n#diff_mean = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].mean()\n#diff_median = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].median()\n#diff_std = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].std()\n\n# Fill NaN values in Min_x or Min_y with a specific value, e.g., 0\n#totalCOPD_ozone_merged_df_filled = totalCOPD_ozone_merged_df.fillna({'Min_x': 0, 'Min_y': 0})\n\n# Recalculate the difference\n#totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'] = totalCOPD_ozone_merged_df_filled['Min_x'] - totalCOPD_ozone_merged_df_filled['Min_y']\n\n# Display the updated DataFrame\n#print(totalCOPD_ozone_merged_df_filled[['Min_x', 'Min_y', 'difference_Min_x_Min_y']].head())\n\n# Calculate basic statistics\n#diff_mean = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].mean()\n#diff_median = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].median()\n#diff_std = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].std()\n\n#print(f\"Mean of the difference: {diff_mean}\")\n#print(f\"Median of the difference: {diff_median}\")\n#print(f\"Standard deviation of the difference: {diff_std}\")\n\n# Drop the Min_x column\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.drop(columns=['Min_x', 'Max_x'])\n\n# Rename columns\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.rename(columns={'Min_y': 'Min', 'Max_y': 'Max'})\n\n\n#def do_breatheright_correlation_analysis():\n    # Read in the merged CSV file with ozone and lung disease data\n    #totalCOPD_ozone_merged_df = pd.read_csv(f\"/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD_ozone_merged_df.csv\")\n    #print(totalCOPD_ozone_merged_df.head())\n    #print(totalCOPD_ozone_merged_df.columns)\n\n# Drop the unnecessary columns\n# ILD_merged_pm25_df = ILD_merged_pm25_df.drop(columns=[\"county_x\", 'State Name', 'county_y', 'State Name_y'])\n\n# Figuring out which columns to drop\n# Values in 'county_x' but not in 'county_y'\n#county_x_not_in_county_y = set(nosmokeCOPD_merged_pm25_df['county_x'].dropna()).difference(set(ILD_merged_pm25_df['county_y'].dropna()))\n#print(\"Values in 'county_x' but not in 'county_y':\")\n#print(county_x_not_in_county_y)\n\n# Values in 'county_y' but not in 'county_x'\n#county_y_not_in_county_x = set(ILD_merged_pm25_df['county_y'].dropna()).difference(set(ILD_merged_pm25_df['county_x'].dropna()))\n#print(\"\\nValues in 'county_y' but not in 'county_x':\")\n#print(county_y_not_in_county_x)\n\n# Check for null values\n#print(\"\\nNull values in 'county_x':\")\n#print(ILD_merged_pm25_df['county_x'].isnull().sum())\n\n#print(\"\\nNull values in 'county_y':\")\n#print(ILD_merged_pm25_df['county_y'].isnull().sum())\n\n# Drop the 'county_x' column\n#ILD_merged_pm25_df = ILD_merged_pm25_df.drop(columns=['county_x'])\n\n# Convert state names in 'State Name' to lowercase\n#totalCOPD_ozone_merged_df['State Name'] = totalCOPD_ozone_merged_df['State Name'].str.lower()\n\n# Convert state names in 'state' to lowercase\n#totalCOPD_ozone_merged_df['state'] = totalCOPD_ozone_merged_df['state'].str.lower()\n\n# Get unique values in 'State Name' and 'state'\n#state_name_values = set(totalCOPD_ozone_merged_df['State Name'].dropna().unique())\n#state_values = set(totalCOPD_ozone_merged_df['state'].dropna().unique())\n\n# Find differences\n#diff_state_name_not_in_state = state_name_values - state_values\n#diff_state_not_in_state_name = state_values - state_name_values\n\n# Print the differences\n#print(\"Values in 'State Name' but not in 'state':\")\n#print(diff_state_name_not_in_state)\n\n#print(\"\\nValues in 'state' but not in 'State Name':\")\n#print(diff_state_not_in_state_name)\n\n# Check for null values\n#print(\"\\nNull values in 'State Name':\")\n#print(totalCOPD_ozone_merged_df['State Name'].isnull().sum())\n\n#print(\"\\nNull values in 'state':\")\n#print(totalCOPD_ozone_merged_df['state'].isnull().sum())\n\n# Drop the 'state' column\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.drop(columns=['state'])\n\n# Renaming columns for clarity\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.rename(columns={\n    #'Max': 'ozone_max',\n    #'Min': 'ozone_min',\n    #'Mean': 'ozone_mean',\n    #'Median': 'ozone_median',\n    #'Std': 'ozone_std',\n#})\n\n# Calculate correlations\n#correlation_matrix = totalCOPD_ozone_merged_df[[\n    #'Average', 'Min', 'Max',\n    #'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std'\n#]].corr()\n\n# Convert columns to numeric where applicable\n#numeric_columns = ['average', 'min', 'max', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']\n#totalCOPD_ozone_merged_df[numeric_columns] = totalCOPD_ozone_merged_df[numeric_columns].apply(pd.to_numeric, errors='coerce')\n\n# Verify the data types after conversion\n#print(totalCOPD_ozone_merged_df.dtypes)\n\n# Save correlation matrix to CSV\n#correlation_matrix.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/COPDtotalozone_correlation_matrix.csv')\n\n# Plot Correlation Heatmap\n#plt.figure(figsize=(12, 13))\n#sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\n#plt.title('COPD Total Incidence vs. Ozone Correlation Heatmap')\n#plt.savefig(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD1_correlation_heatmap_ozone.png')\n# plt.show()\n\n\n# Check for missing values in relevant columns\n#print(totalCOPD_ozone_merged_df[['average', 'min', 'max', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']].isnull().sum())\n\n\n#print(totalCOPD_ozone_merged_df.dtypes)\n\n\n#print(totalCOPD_ozone_merged_df[['average', 'min', 'max', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']].sample(10))\n\n\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a DataFrame\nfile_path = '/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD_ozone_merged_df.csv'\ntotalCOPD_ozone_merged_df = pd.read_csv(file_path)\n\n# Verify the data types after conversion\nprint(totalCOPD_ozone_merged_df.dtypes)\n\n# Display the first few rows of the DataFrame\nprint(totalCOPD_ozone_merged_df.head())\nprint(totalCOPD_ozone_merged_df.columns)\n\n# Assuming 'Min_x' and 'Min_y' are already in the DataFrame\n#totalCOPD_ozone_merged_df['difference_Min_x_Min_y'] = totalCOPD_ozone_merged_df['Min_x'] - totalCOPD_ozone_merged_df['Min_y']\n\n# Display the first few rows to check the new column\n#print(totalCOPD_ozone_merged_df[['Min_x', 'Min_y', 'difference_Min_x_Min_y']].head())\n\n# Calculate basic statistics for the difference\n#diff_mean = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].mean()\n#diff_median = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].median()\n#diff_std = totalCOPD_ozone_merged_df['difference_Min_x_Min_y'].std()\n\n# Fill NaN values in Min_x or Min_y with a specific value, e.g., 0\n#totalCOPD_ozone_merged_df_filled = totalCOPD_ozone_merged_df.fillna({'Min_x': 0, 'Min_y': 0})\n\n# Recalculate the difference\n#totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'] = totalCOPD_ozone_merged_df_filled['Min_x'] - totalCOPD_ozone_merged_df_filled['Min_y']\n\n# Display the updated DataFrame\n#print(totalCOPD_ozone_merged_df_filled[['Min_x', 'Min_y', 'difference_Min_x_Min_y']].head())\n\n# Calculate basic statistics\n#diff_mean = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].mean()\n#diff_median = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].median()\n#diff_std = totalCOPD_ozone_merged_df_filled['difference_Min_x_Min_y'].std()\n\n#print(f\"Mean of the difference: {diff_mean}\")\n#print(f\"Median of the difference: {diff_median}\")\n#print(f\"Standard deviation of the difference: {diff_std}\")\n\n# Drop the Min_x and Max_x columns\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.drop(columns=['Min_x', 'Max_x'])\n\n# Rename columns\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.rename(columns={'Min_y': 'Min', 'Max_y': 'Max'})\n\n# Ensure the renaming has taken place\nprint(totalCOPD_ozone_merged_df.columns)\n\n# Drop the 'state' column\ntotalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.drop(columns=['state'])\n\n# Renaming columns for clarity\n#totalCOPD_ozone_merged_df = totalCOPD_ozone_merged_df.rename(columns={\n    #'Max': 'ozone_max',\n    #'Min': 'ozone_min',\n    #'Mean': 'ozone_mean',\n    #'Median': 'ozone_median',\n    #'Std': 'ozone_std',\n#})\n\n# Convert columns to numeric where applicable\nnumeric_columns = ['Average', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']\ntotalCOPD_ozone_merged_df[numeric_columns] = totalCOPD_ozone_merged_df[numeric_columns].apply(pd.to_numeric, errors='coerce')\n\n# Verify the data types after conversion\nprint(totalCOPD_ozone_merged_df.dtypes)\n\n# Calculate correlations\ncorrelation_matrix = totalCOPD_ozone_merged_df[[\n    'Average', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std'\n]].corr()\n\n# Save correlation matrix to CSV\ncorrelation_matrix.to_csv(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/COPDtotalozone_correlation_matrix.csv')\n\n# Plot Correlation Heatmap\nplt.figure(figsize=(12, 13))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)\nplt.title('COPD Total Incidence vs. Ozone Correlation Heatmap')\nplt.savefig(f'/Users/icce_icecweam7/gw-workspace/S6wTraiideDo/COPD/Non Smoke/totalCOPD1_correlation_heatmap_ozone.png')\n# plt.show()\n\n# Check for missing values in relevant columns\nprint(totalCOPD_ozone_merged_df[['Average', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']].isnull().sum())\n\nprint(totalCOPD_ozone_merged_df.dtypes)\n\nprint(totalCOPD_ozone_merged_df[['Average', 'ozone_max', 'ozone_min', 'ozone_mean', 'ozone_median', 'ozone_std']].sample(10))\n\n\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
